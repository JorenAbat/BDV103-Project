name: Build and Publish Docker Images

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - service: front-end
            context: .
            dockerfile: ./Dockerfile
          - service: books-service
            context: .
            dockerfile: ./services/books-service/Dockerfile
          - service: warehouse-service
            context: .
            dockerfile: ./services/warehouse-service/Dockerfile
          - service: orders-service
            context: .
            dockerfile: ./services/orders-service/Dockerfile
          - service: swagger-docs
            context: .
            dockerfile: ./services/swagger-docs/Dockerfile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Generate image tags
      id: tags
      run: |
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}"
        TAGS="${IMAGE}:latest"
        
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAGS="${TAGS},${IMAGE}:${{ github.event.release.tag_name }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          TAGS="${TAGS},${IMAGE}:main"
        fi
        
        echo "tags=${TAGS}" >> $GITHUB_OUTPUT
        echo "Generated tags: ${TAGS}"
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.tags.outputs.tags }}
        platforms: linux/amd64 